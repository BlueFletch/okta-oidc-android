apply plugin: 'com.jfrog.bintray'
apply plugin: "com.github.dcendents.android-maven"
apply plugin: 'maven-publish'
apply plugin: 'distribution'

group = "com.okta.android"
version = "${rootProject.versionName}"

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
    failOnError = false
    title = null
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task jetifierZip(type: Zip) {
    from("${buildDir}/outputs/aar/oidc-androidx-release.aar")
    from("${buildDir}/publications/Release/pom-default.xml")
    rename("pom-default.xml", "pom-default.pom")
    rename("oidc-androidx-release.aar", "oidc-android-release.aar")
}

//produces non androidx aar
task createAndroidAar(dependsOn: ['generatePomFileForReleasePublication', 'sourcesJar', 'javadocJar', 'bundleReleaseAar', 'jetifierZip']) {
    doLast {
        exec {
            def jetifier = System.getenv("ANDROID_HOME") + "/jetifier-standalone/bin/jetifier-standalone"
            commandLine jetifier,
                    '-c', "$buildDir/../../ci-build/default.generated.config",
                    '-r',
                    '-i', "$buildDir/distributions/oidc-androidx-${rootProject.versionName}.zip",
                    '-o', "$buildDir/distributions/oidc-android-${rootProject.versionName}.zip"
        }
        copy {
            from zipTree("${buildDir}/distributions/oidc-android-${rootProject.versionName}.zip")
            into "${buildDir}/tmp/${project.name}-extracted"
        }
        copy {
            from "${buildDir}/tmp/${project.name}-extracted/oidc-android-release.aar"
            into "${buildDir}/outputs/aar/"
        }
        copy {
            from "${buildDir}/tmp/${project.name}-extracted/pom-default.pom"
            into "${buildDir}/publications/Release/"
            rename("pom-default.pom", "pom-default.xml")
        }
    }
}

afterEvaluate {
    javadoc.classpath += files(android.libraryVariants.collect { variant ->
        variant.javaCompileProvider.get().classpath.files
    })
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        Release(MavenPublication) {
            artifact("$buildDir/outputs/aar/oidc-android-release.aar")
            groupId "${group}"
            artifactId "oidc-android"
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            version "${rootProject.versionName}"
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }

        ReleaseX(MavenPublication) {
            artifact("$buildDir/outputs/aar/oidc-androidx-release.aar")
            groupId "${group}"
            artifactId "oidc-androidx"
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            version "${rootProject.versionName}"
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.implementation.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = properties.getProperty("bintray.user")
    key = properties.getProperty("bintray.apikey")
    publications = ['Release', 'ReleaseX']
    override = false
    pkg {
        repo = "com.okta.android"
        name = "okta-oidc-android"
        description = "Okta OpenID Connect & OAuth 2.0"
        userOrg = "okta"
        publicDownloadNumbers = true
        licenses = ['Apache-2.0']
        websiteUrl = "https://github.com/okta/okta-oidc-android"
        vcsUrl = "https://github.com/okta/okta-oidc-android.git"
        issueTrackerUrl = "https://github.com/okta/okta-oidc-android/issues"
        dryRun = false
        version {
            name = "${rootProject.versionName}"
            desc = "Okta OpenID Connect & OAuth 2.0"
            vcsTag = "${rootProject.versionName}"
            released = new Date()
        }
    }
}
